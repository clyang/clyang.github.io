<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>clyang的技術筆記</title>
  <subtitle>隨手亂記</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.clyang.net/"/>
  <updated>2017-09-01T14:53:52.195Z</updated>
  <id>http://blog.clyang.net/</id>
  
  <author>
    <name>clyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TP-Link 940N V5無線網路速度與穩定度的大奮戰 (OpenWrt/LEDE)</title>
    <link href="http://blog.clyang.net/2017/09/01/tplink-940n-v5-lede-wifi-patch/"/>
    <id>http://blog.clyang.net/2017/09/01/tplink-940n-v5-lede-wifi-patch/</id>
    <published>2017-09-01T04:33:44.000Z</published>
    <updated>2017-09-01T14:53:52.195Z</updated>
    
    <content type="html"><![CDATA[<p>近期朋友入手一台TP-Link WR940N V5，是一款使用TP9343 SOC (Qualcomm的QCA9561閹割版，少了USB以及PCIe的支援)擁有4MB flash及32MB ROM，由於友人沒有任何特殊需求，也不需要任何fancy的功能，所以直接幫他在stock firmware中設定一下，就上線服役了，幾天後，友人反應說偶爾會有斷線的狀況，而且從Windows中重連時會短暫的搜尋不到SSID，得等一陣子才能夠再次搜尋的到，雖然發生頻率不高，但每每發生就得斷線一下，使用上的感受實在不太好。<br><a id="more"></a></p>
<p>我本身對AP也不是非常懂，於是請教了在某AP ODM大廠就職的<a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>，根據他Google一番，問題似乎發生在TP-Link依舊採用Atheros rate control algorithm，但這algorithm在訊號擁擠的環境下，表現很差，所以各大第三方firmware (<a href="https://openwrt.org/" target="_blank" rel="external">Openwrt</a>、dd-wrt)都改用<a href="https://lwn.net/Articles/376765/" target="_blank" rel="external">minstrel_ht</a> rate algorithm，而TP-Link or 他的BSP廠也沒有上對應的patch。<a href="https://patchwork.kernel.org/patch/2676971/" target="_blank" rel="external">詳情可以參考</a>:</p>
<blockquote>
<p>The ath9k rate control algorithm has various architectural issues that make it a poor fit in scenarios like congested environments etc.</p>
</blockquote>
<p>我在晚上尖峰時段在這機器附近掃瞄了一下，周遭最少有21~25台AP，不可不謂<code>擁擠</code>啊，本想說在TP-Link官網上找找有沒有新的Firmware，結果發現超妙的一件事情，我在官網根本找不到V5的版本，本以為是不是買到水貨，還好在NCC網站上有查到資訊，最起碼是官方貨。</p>
<p>唯一解法就是刷第三方韌體，剛好前陣子才看到<a href="https://lede-project.org/" target="_blank" rel="external">LEDE (Linux Embedded Development Environment)專案</a>，是一個based on <a href="https://openwrt.org/" target="_blank" rel="external">Openwrt</a>的專案，目的在改善<a href="https://openwrt.org/" target="_blank" rel="external">Openwrt</a>開發緩慢、開發過程透明度不足以及跟使用者互動極差的缺點，可惜在官方網站只列出支援WR940N <code>V4</code>，所以只好再次請教<a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>，在他比較TP-Link的GPL code後，確認<code>v5</code>跟<code>v4</code>應該是同樣的硬體，所以可以直接刷<code>v4</code>的firmware。</p>
<p>刷的過程本想應該很順利，以為就把firmware透過TP-Link的後台上傳<a href="https://lede-project.org/" target="_blank" rel="external">LEDE</a> firmware即可，結果發現TP-Link竟然開始會檢查是不是官方firwmare，在<a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>檢查了bootloader code後，發現雖然TFTP也會檢查product version，但卻檢查的不太嚴謹，所以只需要把下載回來的firmware (-factory.bin結尾那個)更名為<code>wr940nv5_tp_recovery.bin</code>，然後使用TFTP刷進去即可（刷法Google一下即可）。</p>
<p>刷好後，觀察了一兩天，Wi-fi不穩的問題煙消雲散，但卻發現一個詭異的問題，Wi-fi的download速度一直上不去(upload可以打到80多Mpbs)，在<a href="https://lede-project.org/" target="_blank" rel="external">LEDE</a>上跑了iperf3當server，然後用T440打流量，download最多只能打到35~40Mbps，雖然已經高於友人家中的網路頻寬，同時也發現訊號有稍微減弱，身為資工人，實在很想解決這問題，所以嘗試了許多招式，特此紀錄。</p>
<hr>
<h3 id="0x01-嘗試上Qualcomm-Fast-Path的Patch"><a href="#0x01-嘗試上Qualcomm-Fast-Path的Patch" class="headerlink" title="0x01 嘗試上Qualcomm Fast Path的Patch"></a>0x01 嘗試上Qualcomm Fast Path的Patch</h3><p>WR940N V5採用的SoC是TP9343，所以也是有支援Qualcomm的Fast Path技術，雖然在嘗試前我們就知道Fast Path應該只會對於<code>NAT&lt;-&gt;WAN</code>的效能有顯著提升，而我們先前測試都在NAT內，不過死馬當活馬醫，想說在enable這功能的同時，會不會順便改進一下Wireless的效能。</p>
<p>想不到初次嘗試就碰的一鼻子灰，我們嘗試包<a href="https://lede-project.org/" target="_blank" rel="external">LEDE</a>論壇上<code>gwlim</code><a href="https://forum.lede-project.org/t/qualcomm-fast-path-for-lede/4582" target="_blank" rel="external">提供的patch</a>，結果發現他的patch似乎包了整個完整的SDK，導致包出來的image超過機器僅有的4MB Flash，幾經嘗試拔除一堆套件 e.g. LuCi、opkg、OpenVPN等等等，還是遠超過4MB，就在準備放棄時，<a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>突然發現了有人做了一個<a href="https://forum.lede-project.org/t/qualcomm-fast-path-for-lede/4582/443" target="_blank" rel="external">精簡版的patch</a>，嘗試打上那個patch後，總算成功包好firmware，結果刷上測試，立刻澆了一桶冷水，wireless效能完全沒有顯著改善，GG斯米達。</p>
<p>** 學到技能：包LEDE firmware + 上LEDE Patch</p>
<h3 id="0x02-嘗試增加TX-Power-方法1"><a href="#0x02-嘗試增加TX-Power-方法1" class="headerlink" title="0x02 嘗試增加TX Power (方法1)"></a>0x02 嘗試增加TX Power (方法1)</h3><p>ssh進去LEDE後，發現wlan0的tx power只有20dbm，透過 <code>iw reg get</code>發現雖然Global設定在<code>TW</code>，但是<code>phy#0</code>卻是選擇US，所以我們懷疑firmware有限制wireless的TX Power，所以就嘗試修改這個限制，根據<a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>開示，在TP-Link上這個限制應該是存在ART partition裡面，同時也超有耐心的教導該如何更改，步驟如下：</p>
<ul>
<li>ssh進去LEDE</li>
<li>使用<code>cat /proc/mtd</code>，檢查mtd layout (會看見有個partition叫做art) </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@LEDE:~# cat /proc/mtd</div><div class="line">dev:    size   erasesize  name</div><div class="line">mtd0: 00020000 00010000 &quot;u-boot&quot;</div><div class="line">mtd1: 0011570c 00010000 &quot;kernel&quot;</div><div class="line">mtd2: 002ba8f4 00010000 &quot;rootfs&quot;</div><div class="line">mtd3: 00050000 00010000 &quot;rootfs_data&quot;</div><div class="line">mtd4: 00010000 00010000 &quot;art&quot;</div><div class="line">mtd5: 003d0000 00010000 &quot;firmware&quot;</div></pre></td></tr></table></figure>
<ul>
<li>備份現有的ART partition: <code>cd /tmp &amp;&amp; cat /dev/mtd4 &gt; art_orig.img</code> (注意，參考上一步驟看看art是mtdX)</li>
<li>把<code>art_orig.img</code>從LEDE上scp出來到Linux server上</li>
<li>在Server上編譯<a href="https://github.com/pepe2k/ar9300_eeprom" target="_blank" rel="external">ART partition Tool</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. git clone https://github.com/pepe2k/ar9300_eeprom</div><div class="line">2. cd ar9300_eeprom</div><div class="line">3. make</div></pre></td></tr></table></figure>
<ul>
<li>利用剛剛編譯出來的tool修改ART image: <code>./ar9300_eeprom -y0 art_orig.img -u art_mod.img</code></li>
<li>把修改好後的<code>art_mod.img</code>從server scp回去LEDE的<code>/tmp</code>裡面</li>
<li>ssh進去LEDE，把修改好的image寫回ART partition: <code>cd /tmp &amp;&amp; mtd write art_mod.img art</code></li>
</ul>
<p>然後，你就會發現LEDE告訴你錯誤，原來ART partition從安全性的考量上預設是read-only，所以唯一的辦法就是自己編譯一次LEDE firmware，在make menuconfig中，選擇<code>Kernel modules -&gt; Other modules-&gt;kmod-mtd-rw</code>，重新刷一次編好的firmware後，ssh進去後下: <code>insmod mtd-rw.ko i_want_a_brick=1</code>，在把修改好的ART image刷進去即可，最後修改<code>/etc/config/wireless</code>中的<code>txpower</code>改為<code>30</code>，reboot後即可。</p>
<p>然而，現實是殘酷的，即使重開好後看到<code>iw reg get</code>中的資訊，限制已經被提高到30dbm，但是iwinfo卻顯示<code>wlan0</code>只打到22dbm，再次GG斯米達。</p>
<h3 id="0x03-嘗試增加TX-Power-方法2"><a href="#0x03-嘗試增加TX-Power-方法2" class="headerlink" title="0x03 嘗試增加TX Power (方法2)"></a>0x03 嘗試增加TX Power (方法2)</h3><p>我已經進入自己懷疑自己的階段，開始懷疑是不是剛剛那隻tool沒有把東西改好，此時找到另外一個改法是直接修改<code>ath9k</code> driver的binary檔，這隻tool叫做<a href="http://luci.subsignal.org/~jow/reghack/" target="_blank" rel="external">reghack</a>，使用方法如下：</p>
<ul>
<li>ssh進去LEDE</li>
<li><code>cd /tmp &amp;&amp; wget http://luci.subsignal.org/~jow/reghack/reghack.mips.elf &amp;&amp; chmod +x reghack.mips.elf</code></li>
<li><code>./reghack.mips.elf /lib/modules/*/ath.ko</code></li>
<li><code>./reghack.mips.elf /lib/modules/*/cfg80211.ko</code></li>
<li>reboot</li>
</ul>
<p>然後，發現現實毫不留情面地在給我一個大大的巴掌，毫無幫助，經過<a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>大神查詢FCC的資料，發現940N V5申報最高就只能打到23dbm (22dbm + 1dbm antenna gain = 23dbm)，所以我們已經打到硬體的極限，同時他也發現另外一個有趣的事，940N V4竟然可以打到26 dbm，比較了PCB Layout發現V5應該是cost down少了三顆power amplifier，所以txpower也就打不上去了，含淚GG思米達！</p>
<p>** 學到技能：買AP前要看FCC申報資料，同樣型號同樣的CHIP，能打出來的txpower還是有不小差異</p>
<h3 id="0x04-意外發現QCA9561的LNA-PA-patch"><a href="#0x04-意外發現QCA9561的LNA-PA-patch" class="headerlink" title="0x04 意外發現QCA9561的LNA/PA patch"></a>0x04 意外發現QCA9561的LNA/PA patch</h3><p>在我已經打算放棄時，隨意亂Google時突然發現在LEDE官方論壇一個關於<a href="https://github.com/oe1rfc/lede-qca9561-pa-bias/commit/88dcdee6b0b86d489afb9bc54010c04063695e5e" target="_blank" rel="external">QCA9561 LNA/PA的patch</a>，LEDE中的ath9k driver錯把AR9561的PA Bias level設定成AR9565的，AR9565是<code>0x1e00</code>而AR9561則是<code>0x300</code>，這個patch便是修正這錯誤讓firmware可以讀取正確的calibration資訊，所以我決定做最後一次嘗試，再一次的編譯了LEDE，步驟如下:</p>
<ol>
<li>git clone <a href="https://git.lede-project.org/source.git" target="_blank" rel="external">https://git.lede-project.org/source.git</a> lede &amp;&amp; cd lede</li>
<li>./scripts/feeds update -a &amp;&amp; ./scripts/feeds install -a</li>
<li>make defconfig &amp;&amp; make menuconfig</li>
<li>cd package/kernel/mac80211/patches</li>
<li>wget <a href="https://raw.githubusercontent.com/oe1rfc/lede-qca9561-pa-bias/88dcdee6b0b86d489afb9bc54010c04063695e5e/package/kernel/mac80211/patches/514-ath9k_QCA9561_pa_bias.patch" target="_blank" rel="external">https://raw.githubusercontent.com/oe1rfc/lede-qca9561-pa-bias/88dcdee6b0b86d489afb9bc54010c04063695e5e/package/kernel/mac80211/patches/514-ath9k_QCA9561_pa_bias.patch</a></li>
<li>cd ../../../ &amp;&amp; make -j 4 V=s CONFIG_DEBUG_SECTION_MISMATCH=y 2&gt;&amp;1 | tee /tmp/build.log | egrep -i ‘(warn|error)’</li>
</ol>
<p>在毫無期待的心情下再測試了一下，結果讓人大幅振奮，速度竟然攀升到75Mbps，竟然在打算放棄前最後一刻，成功地解決了這個問題！</p>
<hr>
<h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>整個過程如果沒有對AP極為熟悉的<a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>協助，根本沒有機會解決這問題，再次感謝！也從中學到了寶貴的經驗：</p>
<ol>
<li>以後買AP要先查能不能刷<a href="https://lede-project.org/" target="_blank" rel="external">LEDE</a> firmware，的確如專案所稱的對使用者比較友善。</li>
<li>除了要先查支不支援<a href="https://lede-project.org/" target="_blank" rel="external">LEDE</a>外，更要記得查詢FCC，看看實際能夠打到多強的TX Power</li>
<li><a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>真的超強</li>
</ol>
<h1 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h1><p>附上<a href="https://github.com/terces" target="_blank" rel="external">阿水大神</a>調教過的超級瘦身版config.seed (for TL-WR940N V4/5 only)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">CONFIG_TARGET_ar71xx=y</div><div class="line">CONFIG_TARGET_ar71xx_generic=y</div><div class="line">CONFIG_TARGET_ar71xx_generic_DEVICE_tl-wr940n-v4=y</div><div class="line">CONFIG_DEVEL=y</div><div class="line">CONFIG_TOOLCHAINOPTS=y</div><div class="line"># CONFIG_ATH9K_UBNTHSR is not set</div><div class="line"># CONFIG_GCC_USE_VERSION_5 is not set</div><div class="line">CONFIG_GCC_USE_VERSION_6=y</div><div class="line">CONFIG_GCC_VERSION=&quot;6.3.0&quot;</div><div class="line"># CONFIG_IPV6 is not set</div><div class="line"># CONFIG_KERNEL_CRASHLOG is not set</div><div class="line"># CONFIG_KERNEL_DEBUG_FS is not set</div><div class="line"># CONFIG_KERNEL_DEBUG_INFO is not set</div><div class="line"># CONFIG_KERNEL_DEBUG_KERNEL is not set</div><div class="line"># CONFIG_KERNEL_IPV6 is not set</div><div class="line"># CONFIG_KERNEL_KALLSYMS is not set</div><div class="line"># CONFIG_KERNEL_MAGIC_SYSRQ is not set</div><div class="line"># CONFIG_KERNEL_SWAP is not set</div><div class="line"># CONFIG_PACKAGE_MAC80211_DEBUGFS is not set</div><div class="line">CONFIG_PACKAGE_iperf3=y</div><div class="line">CONFIG_PACKAGE_kmod-mtd-rw=y</div><div class="line">CONFIG_PACKAGE_kmod-nls-base=y</div><div class="line">CONFIG_PACKAGE_kmod-usb-core=y</div><div class="line">CONFIG_PACKAGE_kmod-usb-ehci=y</div><div class="line">CONFIG_PACKAGE_kmod-usb-ledtrig-usbport=y</div><div class="line">CONFIG_PACKAGE_kmod-usb-ohci=y</div><div class="line">CONFIG_PACKAGE_kmod-usb2=y</div><div class="line"># CONFIG_PACKAGE_libip6tc is not set</div><div class="line">CONFIG_PACKAGE_libiwinfo-lua=y</div><div class="line">CONFIG_PACKAGE_liblua=y</div><div class="line">CONFIG_PACKAGE_libubus-lua=y</div><div class="line">CONFIG_PACKAGE_libuci-lua=y</div><div class="line">CONFIG_PACKAGE_lua=y</div><div class="line">CONFIG_PACKAGE_luci-app-firewall=y</div><div class="line">CONFIG_PACKAGE_luci-base=y</div><div class="line">CONFIG_PACKAGE_luci-lib-ip=y</div><div class="line">CONFIG_PACKAGE_luci-lib-jsonc=y</div><div class="line">CONFIG_PACKAGE_luci-lib-nixio=y</div><div class="line">CONFIG_PACKAGE_luci-mod-admin-full=y</div><div class="line">CONFIG_PACKAGE_luci-proto-ppp=y</div><div class="line">CONFIG_PACKAGE_luci-theme-bootstrap=y</div><div class="line">CONFIG_PACKAGE_rpcd=y</div><div class="line">CONFIG_PACKAGE_uhttpd=y</div><div class="line">CONFIG_PACKAGE_uhttpd-mod-ubus=y</div><div class="line">CONFIG_PACKAGE_wireless-tools=y</div><div class="line">CONFIG_STRIP_KERNEL_EXPORTS=y</div><div class="line">CONFIG_TARGET_SQUASHFS_BLOCK_SIZE=1024</div><div class="line">CONFIG_USE_MKLIBS=y</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期朋友入手一台TP-Link WR940N V5，是一款使用TP9343 SOC (Qualcomm的QCA9561閹割版，少了USB以及PCIe的支援)擁有4MB flash及32MB ROM，由於友人沒有任何特殊需求，也不需要任何fancy的功能，所以直接幫他在stock firmware中設定一下，就上線服役了，幾天後，友人反應說偶爾會有斷線的狀況，而且從Windows中重連時會短暫的搜尋不到SSID，得等一陣子才能夠再次搜尋的到，雖然發生頻率不高，但每每發生就得斷線一下，使用上的感受實在不太好。&lt;br&gt;
    
    </summary>
    
    
      <category term="網路技術" scheme="http://blog.clyang.net/tags/%E7%B6%B2%E8%B7%AF%E6%8A%80%E8%A1%93/"/>
    
      <category term="TP9343" scheme="http://blog.clyang.net/tags/TP9343/"/>
    
      <category term="LEDE Project" scheme="http://blog.clyang.net/tags/LEDE-Project/"/>
    
      <category term="OpenWrt" scheme="http://blog.clyang.net/tags/OpenWrt/"/>
    
      <category term="TP-Link 940N v5" scheme="http://blog.clyang.net/tags/TP-Link-940N-v5/"/>
    
  </entry>
  
  <entry>
    <title>網路測速小技巧：使用aria2c</title>
    <link href="http://blog.clyang.net/2017/08/19/aria2c-speed-test-tip/"/>
    <id>http://blog.clyang.net/2017/08/19/aria2c-speed-test-tip/</id>
    <published>2017-08-19T23:26:29.000Z</published>
    <updated>2017-08-20T08:11:01.224Z</updated>
    
    <content type="html"><![CDATA[<p>我是個喜歡測試網路速度的無聊人，<a href="http://beta.speedtest.net/" target="_blank" rel="external">Speedtest.net</a>雖然方便但沒辦法提供多線+大檔案(e.g 10GB以上的大小)的長時間測試，所以就想到<a href="https://aria2.github.io/" target="_blank" rel="external"><code>aria2c</code></a>這個在cli下的的多線下載軟體，不過我又不想實際把檔案寫入硬碟上 (尤其這年頭大家都用SSD，為了測試寫10G的資料實在很傷啊)，所以研究了一下，湊出了以下的解法。 <strong>注意！此方法僅適用於Unix或MacOS</strong><br><a id="more"></a><br>如果你的電腦還沒有安裝<a href="https://aria2.github.io/" target="_blank" rel="external"><code>aria2c</code></a>，請先自行安裝好，然後輸入以下指令即可讓你同時16線抓取遠端的一個大檔而且不會將檔案實際寫入磁碟中。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 抓取一個1.5G的iso檔</div><div class="line">aria2c -d /dev -o null --allow-overwrite=true -x 16 -s 16 --file-allocation=none --summary-interval=0 http://tw.archive.ubuntu.com/ubuntu-cd/17.04/ubuntu-17.04-desktop-amd64.iso</div></pre></td></tr></table></figure>
<p>附上各個參數的說明給好奇的你：</p>
<ul>
<li><code>-d /dev</code> : 將檔案輸出至/dev中</li>
<li><code>-o null</code> : 將檔案命名為null</li>
<li><code>--allow-overwrite=true</code> : 如果磁碟上有同樣名稱的檔案，允許直接覆蓋過去</li>
<li><code>-x 16</code> : 把單一server允許建立的連線數從1個增加為16個</li>
<li><code>-s 16</code> : 指定用要16個connection同時下載單一檔案，預設是5</li>
<li><code>--file-allocation=none</code> : 不需先allocate磁碟空間</li>
<li><code>--summary-interval=0</code> : 不要每個一陣子就顯示summary</li>
</ul>
<p>全部結合在一起後的效果，用白話文來說就是:</p>
<blockquote>
<p>幫我把某個url的檔案用16線給我抓回來，寫進去/dev/null裡面，如果/dev/null已經存在，不要理他，硬寫進去即可，然後也不用幫我在磁碟上取得一塊空間，而且summary看了很煩，所以也不用顯示了。</p>
</blockquote>
<p>透過這方式你就可以指定一個超大的檔案來測試一下你的ISP連外速度的穩定度啦！</p>
<p>最後小bouns，附上一些超過10GB的測速檔案給愛測速的你 kerker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">http://download.xs4all.nl/test/10GB.bin</div><div class="line">http://lg-tor.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.ams2-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.chi2-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.den2-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.fra2-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.la2-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.lon-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.mad-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.mia-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.ny-z.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.par-c.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.sea-z.fdcservers.net/10GBtest.zip</div><div class="line">http://lg.vie-c.fdcservers.net/10GBtest.zip</div><div class="line">http://mirror.filearena.net/pub/speed/SpeedTest_2048MB.dat</div><div class="line">http://mirror.i3d.net/10000mb.bin</div><div class="line">http://mirror.nl.leaseweb.net/speedtest/10000mb.bin</div><div class="line">http://mirror.us.leaseweb.net/speedtest/10000mb.bin</div><div class="line">http://mirror.widexs.nl/ftp/pub/speed/10000mb.bin</div><div class="line">http://mirrors-lax.webnx.com/test/10gb.bin</div><div class="line">http://nl.altushost.com/10gb.test</div><div class="line">http://ping6.online.net/10000Mo.dat</div><div class="line">http://proof.ovh.ca/files/10Gio.dat</div><div class="line">http://proof.ovh.net/files/10Gio.dat</div><div class="line">http://repos.lax-noc.com/speedtests/100gb.bin</div><div class="line">http://repos.mia.lax-noc.com/speedtests/100gb.bin</div><div class="line">http://speed.hetzner.de/10GB.bin</div><div class="line">http://speedtest.belwue.net/100G</div><div class="line">http://speedtest.serverius.net/files/10000mb.bin</div><div class="line">http://speedtest.sjc01.softlayer.com/downloads/test10000.zip</div><div class="line">http://speedtest.wdc01.softlayer.com/downloads/test10000.zip</div><div class="line">http://speedtest6.tele2.net/100GB.zip</div><div class="line">https://speed.hostkey.ru/ftp/10000mb.bin</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是個喜歡測試網路速度的無聊人，&lt;a href=&quot;http://beta.speedtest.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Speedtest.net&lt;/a&gt;雖然方便但沒辦法提供多線+大檔案(e.g 10GB以上的大小)的長時間測試，所以就想到&lt;a href=&quot;https://aria2.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;aria2c&lt;/code&gt;&lt;/a&gt;這個在cli下的的多線下載軟體，不過我又不想實際把檔案寫入硬碟上 (尤其這年頭大家都用SSD，為了測試寫10G的資料實在很傷啊)，所以研究了一下，湊出了以下的解法。 &lt;strong&gt;注意！此方法僅適用於Unix或MacOS&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="aria2c" scheme="http://blog.clyang.net/tags/aria2c/"/>
    
      <category term="speedtest" scheme="http://blog.clyang.net/tags/speedtest/"/>
    
      <category term="網路技術" scheme="http://blog.clyang.net/tags/%E7%B6%B2%E8%B7%AF%E6%8A%80%E8%A1%93/"/>
    
  </entry>
  
  <entry>
    <title>使用HTTP 204狀態碼來節省API的頻寬用量</title>
    <link href="http://blog.clyang.net/2017/08/18/use-http-204-reduce-bandwidth/"/>
    <id>http://blog.clyang.net/2017/08/18/use-http-204-reduce-bandwidth/</id>
    <published>2017-08-18T06:42:57.000Z</published>
    <updated>2017-08-18T16:29:07.066Z</updated>
    
    <content type="html"><![CDATA[<p>找資料時發現一篇有趣的技術文，是由<a href="https://www.stathat.com/" target="_blank" rel="external">StatHat</a>所撰寫的「<a href="https://blog.stathat.com/2017/05/05/bandwidth.html" target="_blank" rel="external">83% Bandwidth Reduction via API ResponseChange</a>」。<br><a id="more"></a><br>原理其實相當簡單，一般在設計RESTful API時，最常見的作法就是回傳一個json，裡面通常都會包涵執行結果的狀態碼以及錯誤說明，譬如說下方這個回傳執行成功的範例，包含http header也只有152 bytes。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/json</div><div class="line">Date: Tue, 02 May 2017 14:53:45 GMT</div><div class="line">Content-Length: 25</div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">&#123;&quot;status&quot;:200,&quot;msg&quot;:&quot;ok&quot;&#125;</div></pre></td></tr></table></figure>
<p>但是當你的量大到像是<a href="https://www.stathat.com/" target="_blank" rel="external">StatHat</a>，每個月有多達1,500億則request，既使每則request都執行成功而回應上面的json，也會使用超過20TB的量 (更別提如果執行失敗，<code>msg</code>還會帶一些說明而佔用更多bytes)。</p>
<p>在實際使用情境下，絕大多數的request都是正常的執行，他們開始研究要怎麼樣能夠用最少的資料量讓使用者得知他們的request已經成功被執行，再參考<a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="external">RFC-7231</a>後，他們看到了一個常常被遺忘的http狀態碼: <code>204</code>，根據<a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="external">RFC-7231</a>，他的定義是</p>
<blockquote>
<p>The 204 (No Content) status code indicates that the server has successfully fulfilled the request and that there is no additional content to send in the response payload body.</p>
<p>翻成白話文就是：如果client收到http 204 status code就表示你送出的request有成功的被滿足，句點！沒有其他廢話！</p>
</blockquote>
<p>於是乎，回傳的http header變成只有25 bytes，省下了大概125 bytes！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 204 No Content</div></pre></td></tr></table></figure>
<p>根據<a href="https://www.stathat.com/" target="_blank" rel="external">StatHat</a>的觀察，這樣的改變每個月幫他們省下了大概17TB的流量，相當驚人吧！</p>
<p>結論：你得先有如此大的量才需要考慮從http response code來省流量，kerker</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;找資料時發現一篇有趣的技術文，是由&lt;a href=&quot;https://www.stathat.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StatHat&lt;/a&gt;所撰寫的「&lt;a href=&quot;https://blog.stathat.com/2017/05/05/bandwidth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;83% Bandwidth Reduction via API ResponseChange&lt;/a&gt;」。&lt;br&gt;
    
    </summary>
    
    
      <category term="網路技術" scheme="http://blog.clyang.net/tags/%E7%B6%B2%E8%B7%AF%E6%8A%80%E8%A1%93/"/>
    
      <category term="http 204" scheme="http://blog.clyang.net/tags/http-204/"/>
    
  </entry>
  
  <entry>
    <title>非固定制Hinet IPv6 Dual Stack在Ubiquiti Edgerouter上Prefix的更新問題</title>
    <link href="http://blog.clyang.net/2017/08/16/edgerouter-ipv6-prefix-issue/"/>
    <id>http://blog.clyang.net/2017/08/16/edgerouter-ipv6-prefix-issue/</id>
    <published>2017-08-16T04:49:04.000Z</published>
    <updated>2017-08-18T14:03:38.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="症狀"><a href="#症狀" class="headerlink" title="症狀"></a>症狀</h3><p>使用Hinet非固定制方案並且有申請IPv6 Dual Stack的使用者，透過Edgerouter當作分享器時，串在Edgerouter後的電腦如果長期不關機，會碰到當Hinet強制斷線時重撥後，這些電腦雖然可以取得新的IPv6位置，但卻喪失所有的IPv6連線能力。<br><a id="more"></a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在mac上觀察了一下，發現即使已經取得了新的IPv6位置，電腦依舊是使用重撥前的IPv6位置當做第一優先，所以全部的IPv6連線在Hinet重撥後都無法成功建立，於是ssh連進Edgerouter-X使用<code>radvdump</code>觀察router advertisement (RA)的狀況，發現Edgerouter-X依舊在advertise舊的IPv6 Prefix，透過<code>show interfaces</code>發現<code>switch0</code>上面綁著數個之前取得的IPv6 Prefix而沒有被清除掉，而<code>radvd</code>單純只看<code>switch0</code>上綁的IPv6位置來產生RA，導致接受到RA的電腦認為RA中的Prefix都是有效的，即使有取得新的IPv6位置，但MacOS或Windows在這樣的情下，皆會優先使用先前已生效的IPv6位置，所以導致連線失效。</p>
<p>知道原因後，就容易解決了，只需要在每次PPPoE斷線後，把綁在<code>switch0</code>上的IPv6位置清除，當PPPoE重新連上取得新的IPv6位置後，<code>radvd</code>只會看到最新的IPv6位置，也就不會繼續advertise舊的Prefix，而在電腦端(無論是MacOS或Windows)，則會因為只接受到新的Prefix而認為先前的IPv6位置已經失效，從而改使用新的IPv6位置進行連線。</p>
<h3 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h3><p>(1) ssh登入Edgerouter後，<code>sudo vi /etc/ppp/ip-down.d/remove_invalidv6.sh</code> 貼上下列內容<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line">/sbin/ifconfig switch0 | grep -ivE <span class="string">'fe80'</span> | grep <span class="string">'inet6'</span> | awk <span class="string">'&#123;print $3&#125;'</span> | <span class="keyword">while</span> <span class="built_in">read</span> -r ipv6addr ; <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Removing <span class="variable">$ipv6addr</span> from switch0"</span> &gt;&gt; /tmp/ipv6_remove.log</div><div class="line">    /sbin/ip -6 addr del <span class="variable">$ipv6addr</span> dev switch0</div><div class="line"><span class="keyword">done</span></div><div class="line">/etc/init.d/radvd restart</div></pre></td></tr></table></figure></p>
<p>(2) 存擋離開後，輸入: <code>sudo chmod +x /etc/ppp/ip-down.d/remove_invalidv6.sh</code></p>
<p>(3) 修改此檔，<code>sudo vi /opt/vyatta/sbin/vyatta_gen_radvd.pl</code>，在243行會看到下列程式碼</p>
   <figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Write parameters out to config file</span></div><div class="line"><span class="keyword">print</span> $FD_WR <span class="string">"    prefix $prefix &#123;\n"</span>;</div><div class="line"><span class="keyword">foreach</span> <span class="keyword">my</span> $key (<span class="keyword">keys</span> %prefix_param_hash) &#123;</div><div class="line">    <span class="keyword">print</span> $FD_WR <span class="string">"        $key $prefix_param_hash&#123;$key&#125;;\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> $FD_WR <span class="string">"    &#125;;\n"</span>;</div></pre></td></tr></table></figure>
<p>  在倒數第二行, 新增一行code如下</p>
  <figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Write parameters out to config file</span></div><div class="line">  <span class="keyword">print</span> $FD_WR <span class="string">"    prefix $prefix &#123;\n"</span>;</div><div class="line">  <span class="keyword">foreach</span> <span class="keyword">my</span> $key (<span class="keyword">keys</span> %prefix_param_hash) &#123;</div><div class="line">      <span class="keyword">print</span> $FD_WR <span class="string">"        $key $prefix_param_hash&#123;$key&#125;;\n"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">print</span> $FD_WR <span class="string">"        DeprecatePrefix on;\n"</span>;  <span class="comment"># &lt;====================== 新增這一行!!</span></div><div class="line">  <span class="keyword">print</span> $FD_WR <span class="string">"    &#125;;\n"</span>;</div></pre></td></tr></table></figure>
<p>(4) 存擋離開後, 輸入<code>sudo reboot</code>重開機即可. </p>
<h3 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h3><p>這問題應該存在EdgeOS中很久了，在官方論壇中只看到有人問也沒人解，所以就自己跳下來解掉了。</p>
<p>此為官方論壇討論串：<a href="https://community.ubnt.com/t5/EdgeMAX/Solution-for-client-losing-IPv6-connectivity-after-PPPoE-re/m-p/2019416" target="_blank" rel="external">Solution for client losing IPv6 connectivity after PPPoE re-assign the new prefix</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;症狀&quot;&gt;&lt;a href=&quot;#症狀&quot; class=&quot;headerlink&quot; title=&quot;症狀&quot;&gt;&lt;/a&gt;症狀&lt;/h3&gt;&lt;p&gt;使用Hinet非固定制方案並且有申請IPv6 Dual Stack的使用者，透過Edgerouter當作分享器時，串在Edgerouter後的電腦如果長期不關機，會碰到當Hinet強制斷線時重撥後，這些電腦雖然可以取得新的IPv6位置，但卻喪失所有的IPv6連線能力。&lt;br&gt;
    
    </summary>
    
    
      <category term="Edgerouter" scheme="http://blog.clyang.net/tags/Edgerouter/"/>
    
      <category term="IPv6" scheme="http://blog.clyang.net/tags/IPv6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://blog.clyang.net/2017/08/15/Hello-World/"/>
    <id>http://blog.clyang.net/2017/08/15/Hello-World/</id>
    <published>2017-08-15T19:22:00.000Z</published>
    <updated>2017-08-18T12:28:10.324Z</updated>
    
    <content type="html"><![CDATA[<p>已經忘記是第幾次嘗試寫blog了 XD，希望這次可以撐久一點 kerker</p>
<p>(BTW，擺在github pages上面，所以沒有enable https.)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已經忘記是第幾次嘗試寫blog了 XD，希望這次可以撐久一點 kerker&lt;/p&gt;
&lt;p&gt;(BTW，擺在github pages上面，所以沒有enable https.)&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
